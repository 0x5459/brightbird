{
  "consumes": [
    "application/json",
    "application/xml"
  ],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "BrightBird API.",
    "contact": {
      "email": "venus@ipfsconmmunity.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "host": "127.0.0.1:12356",
  "basePath": "/api/v1",
  "paths": {
    "/deploy/get/{name}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Get deploy plugin by name.",
        "operationId": "getDeployPluginByName",
        "parameters": [
          {
            "type": "string",
            "description": "name of deploy",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "testFlow",
            "schema": {
              "$ref": "#/definitions/testFlow"
            }
          }
        }
      }
    },
    "/deploy/plugins": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Lists all deploy plugin.",
        "operationId": "listDeployPlugins",
        "responses": {
          "200": {
            "description": "pluginOut",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pluginOut"
              }
            }
          }
        }
      }
    },
    "/group": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Lists all group.",
        "operationId": "listGroup",
        "responses": {
          "200": {
            "description": "listGroupResp",
            "schema": {
              "$ref": "#/definitions/listGroupResp"
            }
          }
        }
      },
      "post": {
        "description": "Save group",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "saveCases",
        "parameters": [
          {
            "description": "group json",
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "description": "group json",
              "type": "object",
              "$ref": "#/definitions/group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/group/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Get specific group by id.",
        "operationId": "getTestFlow",
        "parameters": [
          {
            "type": "string",
            "description": "name of test flow",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "groupResp",
            "schema": {
              "$ref": "#/definitions/groupResp"
            }
          }
        }
      },
      "post": {
        "description": "Update group name/show/description",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "updateGroup",
        "parameters": [
          {
            "type": "string",
            "description": "id of  group",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "update group request json",
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "description": "update group request json",
              "type": "object",
              "$ref": "#/definitions/updateGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "description": "Delete group by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "deleteGroup",
        "parameters": [
          {
            "type": "string",
            "description": "id of  group",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/job": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Lists all jobs.",
        "operationId": "listJobs",
        "responses": {
          "200": {
            "description": "listJobResp",
            "schema": {
              "$ref": "#/definitions/listJobResp"
            }
          }
        }
      },
      "post": {
        "description": "save job entity, create if not exist",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "saveJob",
        "parameters": [
          {
            "description": "job json",
            "name": "job",
            "in": "body",
            "required": true,
            "schema": {
              "description": "job json",
              "type": "object",
              "$ref": "#/definitions/job"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/job/{id}": {
      "get": {
        "description": "Update job",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "updateJob",
        "parameters": [
          {
            "type": "string",
            "description": "job id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "job update params",
            "name": "updateJobParams",
            "in": "body",
            "required": true,
            "schema": {
              "description": "job update params",
              "type": "object",
              "$ref": "#/definitions/updateJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "job",
            "schema": {
              "$ref": "#/definitions/job"
            }
          }
        }
      },
      "delete": {
        "description": "Delete job by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "deleteJob",
        "parameters": [
          {
            "type": "string",
            "description": "id of  job",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/task": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Lists all tasks.",
        "operationId": "listTasks",
        "parameters": [
          {
            "type": "string",
            "description": "job id",
            "name": "jobId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "listTaskResp",
            "schema": {
              "$ref": "#/definitions/listTaskResp"
            }
          }
        }
      }
    },
    "/task/{id}": {
      "get": {
        "description": "Get task by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "getTask",
        "parameters": [
          {
            "type": "string",
            "description": "job id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "task",
            "schema": {
              "$ref": "#/definitions/task"
            }
          }
        }
      },
      "delete": {
        "description": "Delete task by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "deleteTask",
        "parameters": [
          {
            "type": "string",
            "description": "id of  job",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/testflow": {
      "post": {
        "description": "save test case, create if not exist",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "saveTestFlow",
        "parameters": [
          {
            "description": "test flow json",
            "name": "testflow",
            "in": "body",
            "required": true,
            "schema": {
              "description": "test flow json",
              "type": "object",
              "$ref": "#/definitions/testFlow"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/testflow/count/": {
      "get": {
        "description": "Count testflow numbers in group",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "countTestFlowsInGroup",
        "parameters": [
          {
            "type": "string",
            "description": "group id  of test flow",
            "name": "groupId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/testflow/id/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Get specific test case by id.",
        "operationId": "getTestFlowById",
        "parameters": [
          {
            "type": "string",
            "description": "id of test flow",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "testFlow",
            "schema": {
              "$ref": "#/definitions/testFlow"
            }
          }
        }
      }
    },
    "/testflow/list/": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Lists exec test flows in specific group.",
        "operationId": "listTestFlowsInGroup",
        "parameters": [
          {
            "type": "string",
            "description": "group id  of test flow",
            "name": "groupId",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "page number  of test flow",
            "name": "pageNum",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "page size  of test flow",
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "listTestFlowResp",
            "schema": {
              "$ref": "#/definitions/listTestFlowResp"
            }
          }
        }
      }
    },
    "/testflow/listall": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Lists all exec test flows.",
        "operationId": "listAllTestFlows",
        "responses": {
          "200": {
            "description": "testFlow",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/testFlow"
              }
            }
          }
        }
      }
    },
    "/testflow/name/{name}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Get specific test case by name.",
        "operationId": "getTestFlowByName",
        "parameters": [
          {
            "type": "string",
            "description": "name of test flow",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "testFlow",
            "schema": {
              "$ref": "#/definitions/testFlow"
            }
          }
        }
      }
    },
    "/testflow/plugins": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Lists all exec plugins.",
        "operationId": "listTestflowPlugins",
        "responses": {
          "200": {
            "description": "pluginOut",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pluginOut"
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "get backend version",
        "produces": [
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "getVersion"
      }
    }
  },
  "definitions": {
    "BasePageReq": {
      "type": "object",
      "properties": {
        "PageNum": {
          "type": "integer",
          "format": "int64"
        },
        "PageSize": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "BasePageResp": {
      "type": "object",
      "properties": {
        "pageNum": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageNum"
        },
        "pages": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Pages"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "BaseTime": {
      "type": "object",
      "properties": {
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        }
      },
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "Category": {
      "type": "string",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "CronJobParams": {
      "type": "object",
      "properties": {
        "cronExpression": {
          "type": "string",
          "x-go-name": "CronExpression"
        }
      },
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "DeployNode": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "isAnnotateOut": {
          "type": "boolean",
          "x-go-name": "IsAnnotateOut"
        },
        "name": {
          "description": "the name for this test flow",
          "type": "string",
          "minLength": 3,
          "x-go-name": "Name"
        },
        "out": {
          "$ref": "#/definitions/property"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/property"
          },
          "x-go-name": "Properties"
        },
        "svcProperties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/property"
          },
          "x-go-name": "SvcProperties"
        }
      },
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "JobType": {
      "type": "string",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "PluginInfo": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/Category"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "repo": {
          "type": "string",
          "x-go-name": "Repo"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "State": {
      "type": "string",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "TestId": {
      "type": "string",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "TestItem": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "the name for this test flow",
          "type": "string",
          "minLength": 3,
          "x-go-name": "Name"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/property"
          },
          "x-go-name": "Properties"
        },
        "svcProperties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/property"
          },
          "x-go-name": "SvcProperties"
        }
      },
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "group": {
      "description": "Group",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isShow": {
          "type": "boolean",
          "x-go-name": "IsShow"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        },
        "name": {
          "description": "the name for this test flow",
          "type": "string",
          "minLength": 3,
          "x-go-name": "Name"
        }
      },
      "x-go-name": "Group",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "groupResp": {
      "description": "GroupResp",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isShow": {
          "type": "boolean",
          "x-go-name": "IsShow"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        },
        "name": {
          "description": "the name for this test flow",
          "type": "string",
          "minLength": 3,
          "x-go-name": "Name"
        },
        "testFlowCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TestFlowCount"
        }
      },
      "x-go-name": "GroupResp",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "job": {
      "description": "Job",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "cronExpression": {
          "type": "string",
          "x-go-name": "CronExpression"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "jobType": {
          "$ref": "#/definitions/JobType"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "testFlowId": {
          "type": "string",
          "x-go-name": "TestFlowId"
        },
        "versions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Versions"
        }
      },
      "x-go-name": "Job",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "listGroupResp": {
      "description": "ListGroupResp",
      "type": "array",
      "items": {
        "$ref": "#/definitions/groupResp"
      },
      "x-go-name": "ListGroupResp",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "listInGroupRequest": {
      "description": "ListInGroupRequest",
      "type": "object",
      "required": [
        "GroupId"
      ],
      "properties": {
        "GroupId": {
          "description": "the group id of test flow",
          "type": "string"
        },
        "PageNum": {
          "type": "integer",
          "format": "int64"
        },
        "PageSize": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-name": "ListInGroupRequest",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "listJobResp": {
      "description": "ListJobResp",
      "type": "array",
      "items": {
        "$ref": "#/definitions/job"
      },
      "x-go-name": "ListJobResp",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "listTaskResp": {
      "description": "ListTaskResp",
      "type": "array",
      "items": {
        "$ref": "#/definitions/task"
      },
      "x-go-name": "ListTaskResp",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "listTestFlowResp": {
      "description": "ListTestFlowResp",
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testFlow"
          },
          "x-go-name": "List"
        },
        "pageNum": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageNum"
        },
        "pages": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Pages"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-name": "ListTestFlowResp",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "pluginOut": {
      "description": "PluginOut",
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/Category"
        },
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isAnnotateOut": {
          "type": "boolean",
          "x-go-name": "IsAnnotateOut"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "out": {
          "$ref": "#/definitions/property"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/property"
          },
          "x-go-name": "Properties"
        },
        "repo": {
          "type": "string",
          "x-go-name": "Repo"
        },
        "svcProperties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/property"
          },
          "x-go-name": "SvcProperties"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "PluginOut",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "property": {
      "description": "Property Property",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "require": {
          "type": "boolean",
          "x-go-name": "Require"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "x-go-name": "Value"
        }
      },
      "x-go-name": "Property",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "task": {
      "description": "Task",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "jobId": {
          "type": "string",
          "x-go-name": "JobId"
        },
        "logs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Logs"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        },
        "state": {
          "$ref": "#/definitions/State"
        },
        "testFlowId": {
          "type": "string",
          "x-go-name": "TestFlowId"
        },
        "testId": {
          "$ref": "#/definitions/TestId"
        },
        "versions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Versions"
        }
      },
      "x-go-name": "Task",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "testFlow": {
      "description": "TestFlow",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "cases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TestItem"
          },
          "x-go-name": "Cases"
        },
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "graph": {
          "type": "string",
          "x-go-name": "Graph"
        },
        "groupId": {
          "type": "string",
          "x-go-name": "GroupId"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        },
        "name": {
          "description": "the name for this test flow",
          "type": "string",
          "minLength": 3,
          "x-go-name": "Name"
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployNode"
          },
          "x-go-name": "Nodes"
        }
      },
      "x-go-name": "TestFlow",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "updateGroupRequest": {
      "description": "updateGroupRequest",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "isShow": {
          "type": "boolean",
          "x-go-name": "IsShow"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-name": "UpdateGroupRequest",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "updateJobRequest": {
      "description": "UpdateJobRequest",
      "type": "object",
      "properties": {
        "cronExpression": {
          "type": "string",
          "x-go-name": "CronExpression"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "testFlowId": {
          "type": "string",
          "x-go-name": "TestFlowId"
        },
        "versions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Versions"
        }
      },
      "x-go-name": "UpdateJobRequest",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    }
  },
  "x-meta-array": [
    "value1",
    "value2"
  ],
  "x-meta-array-obj": [
    {
      "name": "obj",
      "value": "field"
    }
  ],
  "x-meta-value": "value"
}