{
  "consumes": [
    "application/json",
    "application/xml"
  ],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "BrightBird API.",
    "contact": {
      "email": "venus@ipfsconmmunity.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "host": "192.168.200.103:12356",
  "basePath": "/api/v1",
  "paths": {
    "/deploy/get/{name}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Get deploy plugin by name.",
        "operationId": "getPluginByName",
        "parameters": [
          {
            "type": "string",
            "description": "name of deploy",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "testFlow",
            "schema": {
              "$ref": "#/definitions/testFlow"
            }
          }
        }
      }
    },
    "/group": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Lists all group.",
        "operationId": "listGroup",
        "responses": {
          "200": {
            "description": "listGroupResp",
            "schema": {
              "$ref": "#/definitions/listGroupResp"
            }
          }
        }
      },
      "post": {
        "description": "Save group",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "saveCases",
        "parameters": [
          {
            "description": "group json",
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "description": "group json",
              "type": "object",
              "$ref": "#/definitions/group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/group/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Get specific group by id.",
        "operationId": "getTestFlow",
        "parameters": [
          {
            "type": "string",
            "description": "name of test flow",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "groupResp",
            "schema": {
              "$ref": "#/definitions/groupResp"
            }
          }
        }
      },
      "post": {
        "description": "Update group name/show/description",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "updateGroup",
        "parameters": [
          {
            "type": "string",
            "description": "id of  group",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "update group request json",
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "description": "update group request json",
              "type": "object",
              "$ref": "#/definitions/updateGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "description": "Delete group by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "deleteGroup",
        "parameters": [
          {
            "type": "string",
            "description": "id of  group",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/job": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Lists all jobs.",
        "operationId": "listJobs",
        "responses": {
          "200": {
            "description": "listJobResp",
            "schema": {
              "$ref": "#/definitions/listJobResp"
            }
          }
        }
      },
      "post": {
        "description": "save job entity, create if not exist",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "saveJob",
        "parameters": [
          {
            "description": "job json",
            "name": "job",
            "in": "body",
            "required": true,
            "schema": {
              "description": "job json",
              "type": "object",
              "$ref": "#/definitions/job"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/job/detail/{id}": {
      "get": {
        "description": "Get job detail by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "getJob",
        "parameters": [
          {
            "type": "string",
            "description": "job id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "jobDetailResp",
            "schema": {
              "$ref": "#/definitions/jobDetailResp"
            }
          }
        }
      }
    },
    "/job/{id}": {
      "get": {
        "description": "Update job",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "updateJob",
        "parameters": [
          {
            "type": "string",
            "description": "job id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "job update params",
            "name": "updateJobParams",
            "in": "body",
            "required": true,
            "schema": {
              "description": "job update params",
              "type": "object",
              "$ref": "#/definitions/updateJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "job",
            "schema": {
              "$ref": "#/definitions/job"
            }
          }
        }
      },
      "delete": {
        "description": "Delete job by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "deleteJob",
        "parameters": [
          {
            "type": "string",
            "description": "id of  job",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/logs/pods/{testid}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "List all pod names in test.",
        "operationId": "listPodsInTest",
        "parameters": [
          {
            "type": "string",
            "description": "test id",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "podListResp",
            "schema": {
              "$ref": "#/definitions/podListResp"
            }
          }
        }
      }
    },
    "/logs/{podName}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "get all logs in pod.",
        "operationId": "listLogsInPod",
        "parameters": [
          {
            "type": "string",
            "description": "pod name",
            "name": "podName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "podListResp",
            "schema": {
              "$ref": "#/definitions/podListResp"
            }
          }
        }
      }
    },
    "/plugin/deploy": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Lists all deploy plugin.",
        "operationId": "listDeployPlugins",
        "responses": {
          "200": {
            "description": "pluginOut",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pluginOut"
              }
            }
          }
        }
      }
    },
    "/plugin/exec": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Lists all deploy plugin.",
        "operationId": "listExecPlugin",
        "responses": {
          "200": {
            "description": "pluginOut",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pluginOut"
              }
            }
          }
        }
      }
    },
    "/task": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Lists all tasks.",
        "operationId": "listTasks",
        "parameters": [
          {
            "type": "string",
            "description": "job id",
            "name": "jobId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "listTaskResp",
            "schema": {
              "$ref": "#/definitions/listTaskResp"
            }
          }
        }
      }
    },
    "/task/stop/{id}": {
      "delete": {
        "description": "stop task",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "stopTask",
        "parameters": [
          {
            "type": "string",
            "description": "id of  job",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/task/{id}": {
      "get": {
        "description": "Get task by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "getTask",
        "parameters": [
          {
            "type": "string",
            "description": "job id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "task",
            "schema": {
              "$ref": "#/definitions/task"
            }
          }
        }
      },
      "delete": {
        "description": "Delete task by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "deleteTask",
        "parameters": [
          {
            "type": "string",
            "description": "id of  job",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/testflow": {
      "post": {
        "description": "save test case, create if not exist",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "saveTestFlow",
        "parameters": [
          {
            "description": "test flow json",
            "name": "testflow",
            "in": "body",
            "required": true,
            "schema": {
              "description": "test flow json",
              "type": "object",
              "$ref": "#/definitions/testFlow"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/testflow/count/": {
      "get": {
        "description": "Count testflow numbers in group",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "countTestFlowsInGroup",
        "parameters": [
          {
            "type": "string",
            "description": "group id  of test flow",
            "name": "groupId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/testflow/list/": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Lists exec test flows in specific group.",
        "operationId": "listTestFlowsInGroup",
        "parameters": [
          {
            "type": "string",
            "description": "group id  of test flow",
            "name": "groupId",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "page number  of test flow",
            "name": "pageNum",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "page size  of test flow",
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "listTestFlowResp",
            "schema": {
              "$ref": "#/definitions/listTestFlowResp"
            }
          }
        }
      }
    },
    "/testflow/{id}": {
      "delete": {
        "description": "Delete test flow by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "deleteTestFlow",
        "parameters": [
          {
            "name": "id"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/testflow/{name}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Get specific test case by condition.",
        "operationId": "getTestFlow",
        "parameters": [
          {
            "type": "string",
            "description": "name of test flow",
            "name": "name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "id of test flow",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "testFlow",
            "schema": {
              "$ref": "#/definitions/testFlow"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "get backend version",
        "produces": [
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "getVersion"
      }
    }
  },
  "definitions": {
    "Access": {
      "description": "Access access",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Accessory": {
      "description": "Accessory The accessory of the artifact",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ActionRequest": {
      "description": "ActionRequest The request to stop, pause or resume",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "AdditionLink": {
      "description": "AdditionLink addition link",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "AdditionLinks": {
      "description": "AdditionLinks addition links",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Annotations": {
      "description": "Annotations annotations",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Artifact": {
      "description": "Artifact artifact",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "AuditLog": {
      "description": "AuditLog audit log",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "AuthproxySetting": {
      "description": "AuthproxySetting authproxy setting",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "BoolConfigItem": {
      "description": "BoolConfigItem bool config item",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "CVEAllowlist": {
      "description": "CVEAllowlist The CVE Allowlist for system or project",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "CVEAllowlistItem": {
      "description": "CVEAllowlistItem The item in CVE allowlist",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ChartMetadata": {
      "description": "ChartMetadata The metadata of chart version",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ChartVersion": {
      "description": "ChartVersion A specified chart entry",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ComponentHealthStatus": {
      "description": "ComponentHealthStatus The health status of component",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Configurations": {
      "description": "Configurations configurations",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ConfigurationsResponse": {
      "description": "ConfigurationsResponse configurations response",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ConfigurationsResponseScanAllPolicy": {
      "description": "ConfigurationsResponseScanAllPolicy configurations response scan all policy",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ConfigurationsResponseScanAllPolicyParameter": {
      "title": "ConfigurationsResponseScanAllPolicyParameter The parameters of the policy, the values are dependent on the type of the policy.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Error": {
      "description": "Error a model for all the error response coming from harbor",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Errors": {
      "description": "Errors The error array that describe the errors got during the handling of request",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "EventType": {
      "title": "EventType Webhook supportted event type.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ExecHistory": {
      "description": "ExecHistory exec history",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Execution": {
      "description": "Execution execution",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ExtraAttrs": {
      "description": "ExtraAttrs extra attrs",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "FilterStyle": {
      "description": "FilterStyle The style of the resource filter",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "GCHistory": {
      "description": "GCHistory GC history",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "GeneralInfo": {
      "description": "GeneralInfo general info",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Icon": {
      "description": "Icon icon",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ImmutableRule": {
      "description": "ImmutableRule immutable rule",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ImmutableSelector": {
      "description": "ImmutableSelector immutable selector",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Instance": {
      "description": "Instance instance",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "IntegerConfigItem": {
      "description": "IntegerConfigItem integer config item",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "InternalConfigurationValue": {
      "description": "InternalConfigurationValue internal configuration value",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "InternalConfigurationsResponse": {
      "description": "InternalConfigurationsResponse internal configurations response",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "IsDefault": {
      "description": "IsDefault is default",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "JobQueue": {
      "description": "JobQueue the job queue info",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Label": {
      "description": "Label label",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "LdapConf": {
      "description": "LdapConf The ldap configure properties",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "LdapFailedImportUser": {
      "description": "LdapFailedImportUser ldap failed import user",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "LdapImportUsers": {
      "description": "LdapImportUsers ldap import users",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "LdapPingResult": {
      "description": "LdapPingResult The ldap ping result",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "LdapUser": {
      "description": "LdapUser ldap user",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Metadata": {
      "description": "Metadata metadata",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Metrics": {
      "description": "Metrics metrics",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "NativeReportSummary": {
      "description": "NativeReportSummary The summary for the native report",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "NotifyType": {
      "title": "NotifyType Webhook supportted notify type.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "OIDCCliSecretReq": {
      "description": "OIDCCliSecretReq OIDC cli secret req",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "OIDCUserInfo": {
      "description": "OIDCUserInfo OIDC user info",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "OperateRetentionExecutionBody": {
      "description": "OperateRetentionExecutionBody operate retention execution body",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/internal/api/client/retention"
    },
    "OverallHealthStatus": {
      "description": "OverallHealthStatus The system health status",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "PasswordReq": {
      "description": "PasswordReq password req",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Permission": {
      "description": "Permission permission",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "PingOIDCBody": {
      "description": "PingOIDCBody ping OIDC body",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/internal/api/client/oidc"
    },
    "Platform": {
      "description": "Platform platform",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "PreheatPolicy": {
      "description": "PreheatPolicy preheat policy",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Project": {
      "description": "Project project",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectDeletable": {
      "description": "ProjectDeletable project deletable",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectMember": {
      "description": "ProjectMember project member",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectMemberEntity": {
      "description": "ProjectMemberEntity project member entity",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectMetadata": {
      "description": "ProjectMetadata project metadata",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectReq": {
      "description": "ProjectReq project req",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectScanner": {
      "description": "ProjectScanner project scanner",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectSummary": {
      "description": "ProjectSummary project summary",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectSummaryQuota": {
      "description": "ProjectSummaryQuota project summary quota",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProviderUnderProject": {
      "description": "ProviderUnderProject provider under project",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Quota": {
      "description": "Quota The quota object",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "QuotaRefObject": {
      "description": "QuotaRefObject quota ref object",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "QuotaUpdateReq": {
      "description": "QuotaUpdateReq quota update req",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Reference": {
      "description": "Reference reference",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Registry": {
      "description": "Registry registry",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryCredential": {
      "description": "RegistryCredential registry credential",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryEndpoint": {
      "description": "RegistryEndpoint The style of the resource filter",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryInfo": {
      "description": "RegistryInfo The registry info contains the base info and capability declarations of the registry",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryPing": {
      "description": "RegistryPing registry ping",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryProviderCredentialPattern": {
      "description": "RegistryProviderCredentialPattern The registry credential pattern",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryProviderEndpointPattern": {
      "description": "RegistryProviderEndpointPattern The registry endpoint pattern",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryProviderInfo": {
      "description": "RegistryProviderInfo The registry provider info contains the base info and capability declarations of the registry provider",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryUpdate": {
      "description": "RegistryUpdate registry update",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ReplicationExecution": {
      "description": "ReplicationExecution The replication execution",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ReplicationFilter": {
      "description": "ReplicationFilter replication filter",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ReplicationPolicy": {
      "description": "ReplicationPolicy replication policy",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ReplicationTask": {
      "description": "ReplicationTask The replication task",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ReplicationTrigger": {
      "description": "ReplicationTrigger replication trigger",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ReplicationTriggerSettings": {
      "description": "ReplicationTriggerSettings replication trigger settings",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Repository": {
      "description": "Repository repository",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ResourceList": {
      "description": "ResourceList resource list",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionExecution": {
      "description": "RetentionExecution retention execution",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionExecutionTask": {
      "description": "RetentionExecutionTask retention execution task",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionMetadata": {
      "description": "RetentionMetadata the tag retention metadata",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionPolicy": {
      "description": "RetentionPolicy retention policy",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionPolicyScope": {
      "description": "RetentionPolicyScope retention policy scope",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionRule": {
      "description": "RetentionRule retention rule",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionRuleMetadata": {
      "description": "RetentionRuleMetadata the tag retention rule metadata",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionRuleParamMetadata": {
      "description": "RetentionRuleParamMetadata rule param",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionRuleTrigger": {
      "description": "RetentionRuleTrigger retention rule trigger",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionSelector": {
      "description": "RetentionSelector retention selector",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionSelectorMetadata": {
      "description": "RetentionSelectorMetadata retention selector",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Robot": {
      "description": "Robot robot",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RobotCreate": {
      "title": "RobotCreate The request for robot account creation.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RobotCreateV1": {
      "description": "RobotCreateV1 robot create v1",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RobotCreated": {
      "title": "RobotCreated The response for robot account creation.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RobotPermission": {
      "description": "RobotPermission robot permission",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RobotSec": {
      "title": "RobotSec The response for refresh/update robot account secret.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RoleRequest": {
      "description": "RoleRequest role request",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScanDataExportExecution": {
      "description": "ScanDataExportExecution The replication execution",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScanDataExportExecutionList": {
      "description": "ScanDataExportExecutionList The list of scan data export executions",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScanDataExportJob": {
      "description": "ScanDataExportJob The metadata associated with the scan data export job",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScanDataExportRequest": {
      "title": "ScanDataExportRequest The criteria to select the scan data to export.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScanOverview": {
      "description": "ScanOverview The scan overview attached in the metadata of tag",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Scanner": {
      "description": "Scanner scanner",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScannerAdapterMetadata": {
      "description": "ScannerAdapterMetadata The metadata info of the scanner adapter",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScannerCapability": {
      "description": "ScannerCapability scanner capability",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScannerRegistration": {
      "title": "ScannerRegistration Registration represents a named configuration for invoking a scanner via its adapter.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScannerRegistrationReq": {
      "description": "ScannerRegistrationReq scanner registration req",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScannerRegistrationSettings": {
      "description": "ScannerRegistrationSettings scanner registration settings",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Schedule": {
      "description": "Schedule schedule",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScheduleObj": {
      "description": "ScheduleObj schedule obj",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScheduleTask": {
      "description": "ScheduleTask the schedule task info",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "SchedulerStatus": {
      "description": "SchedulerStatus the scheduler status",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Search": {
      "description": "Search search",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "SearchRepository": {
      "description": "SearchRepository search repository",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "SearchResult": {
      "description": "SearchResult The chart search result item",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "StartReplicationExecution": {
      "description": "StartReplicationExecution start replication execution",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Statistic": {
      "description": "Statistic statistic",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Stats": {
      "title": "Stats Stats provides the overall progress of the scan all process.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Storage": {
      "description": "Storage storage",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "StringConfigItem": {
      "description": "StringConfigItem string config item",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "SupportedWebhookEventTypes": {
      "title": "SupportedWebhookEventTypes Supportted webhook event types and notify types.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "SystemInfo": {
      "description": "SystemInfo system info",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Tag": {
      "description": "Tag tag",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Task": {
      "description": "Task task",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "TriggerRetentionExecutionBody": {
      "description": "TriggerRetentionExecutionBody trigger retention execution body",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/internal/api/client/retention"
    },
    "UserCreationReq": {
      "description": "UserCreationReq user creation req",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserEntity": {
      "description": "UserEntity user entity",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserGroup": {
      "description": "UserGroup user group",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserGroupSearchItem": {
      "description": "UserGroupSearchItem user group search item",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserProfile": {
      "description": "UserProfile user profile",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserResp": {
      "description": "UserResp user resp",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserSearch": {
      "description": "UserSearch user search",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserSearchRespItem": {
      "description": "UserSearchRespItem user search resp item",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserSysAdminFlag": {
      "description": "UserSysAdminFlag user sys admin flag",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "VulnerabilitySummary": {
      "title": "VulnerabilitySummary VulnerabilitySummary contains the total number of the foun d vulnerabilities number and numbers of each severity level.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "WebhookJob": {
      "title": "WebhookJob The webhook job.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "WebhookLastTrigger": {
      "title": "WebhookLastTrigger The webhook policy and last trigger time group by event type.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "WebhookPolicy": {
      "description": "WebhookPolicy The webhook policy object",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "WebhookTargetObject": {
      "title": "WebhookTargetObject The webhook policy target object.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Worker": {
      "description": "Worker worker in the pool",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "WorkerPool": {
      "description": "WorkerPool the worker pool of job service",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "getTestFlowRequest": {
      "description": "GetTestFlowRequest",
      "x-go-name": "GetTestFlowRequest",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "group": {
      "description": "Group",
      "x-go-name": "Group",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "groupResp": {
      "description": "GroupResp",
      "x-go-name": "GroupResp",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "job": {
      "description": "Job",
      "x-go-name": "Job",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "jobDetailResp": {
      "description": "JobDetailResp",
      "x-go-name": "JobDetailResp",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "listGroupResp": {
      "description": "ListGroupResp",
      "x-go-name": "ListGroupResp",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "listInGroupRequest": {
      "description": "ListInGroupRequest",
      "x-go-name": "ListInGroupRequest",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "listJobResp": {
      "description": "ListJobResp",
      "x-go-name": "ListJobResp",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "listTaskResp": {
      "description": "ListTaskResp",
      "x-go-name": "ListTaskResp",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "listTasksReq": {
      "description": "ListTasksReq",
      "x-go-name": "ListTasksReq",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "listTestFlowResp": {
      "description": "ListTestFlowResp",
      "x-go-name": "ListTestFlowResp",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "logListResp": {
      "description": "LogListResp",
      "x-go-name": "LogListResp",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "pluginOut": {
      "description": "PluginOut",
      "x-go-name": "PluginOut",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "podListResp": {
      "description": "PodListResp",
      "x-go-name": "PodListResp",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "property": {
      "description": "Property Property",
      "x-go-name": "Property",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "task": {
      "description": "Task",
      "x-go-name": "Task",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "testFlow": {
      "description": "TestFlow",
      "x-go-name": "TestFlow",
      "x-go-package": "github.com/hunjixin/brightbird/types"
    },
    "updateGroupRequest": {
      "description": "updateGroupRequest",
      "x-go-name": "UpdateGroupRequest",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    },
    "updateJobRequest": {
      "description": "UpdateJobRequest",
      "x-go-name": "UpdateJobRequest",
      "x-go-package": "github.com/hunjixin/brightbird/web/backend/api"
    }
  },
  "x-meta-array": [
    "value1",
    "value2"
  ],
  "x-meta-array-obj": [
    {
      "name": "obj",
      "value": "field"
    }
  ],
  "x-meta-value": "value"
}