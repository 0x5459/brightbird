// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Changetestflow(params *ChangetestflowParams, opts ...ClientOption) (*ChangetestflowOK, error)

	CountTestFlowsInGroup(params *CountTestFlowsInGroupParams, opts ...ClientOption) (*CountTestFlowsInGroupOK, error)

	DeleteGroup(params *DeleteGroupParams, opts ...ClientOption) (*DeleteGroupOK, error)

	DeleteJob(params *DeleteJobParams, opts ...ClientOption) (*DeleteJobOK, error)

	DeleteTask(params *DeleteTaskParams, opts ...ClientOption) (*DeleteTaskOK, error)

	DeleteTestFlow(params *DeleteTestFlowParams, opts ...ClientOption) (*DeleteTestFlowOK, error)

	GetGroupByID(params *GetGroupByIDParams, opts ...ClientOption) (*GetGroupByIDOK, error)

	GetJob(params *GetJobParams, opts ...ClientOption) (*GetJobOK, error)

	GetPlugin(params *GetPluginParams, opts ...ClientOption) (*GetPluginOK, error)

	GetTask(params *GetTaskParams, opts ...ClientOption) (*GetTaskOK, error)

	GetTestFlow(params *GetTestFlowParams, opts ...ClientOption) (*GetTestFlowOK, error)

	GetVersion(params *GetVersionParams, opts ...ClientOption) (*GetVersionOK, error)

	ImportPlugin(params *ImportPluginParams, opts ...ClientOption) (*ImportPluginOK, error)

	ListDeployPlugins(params *ListDeployPluginsParams, opts ...ClientOption) (*ListDeployPluginsOK, error)

	ListExecPlugin(params *ListExecPluginParams, opts ...ClientOption) (*ListExecPluginOK, error)

	ListGroup(params *ListGroupParams, opts ...ClientOption) (*ListGroupOK, error)

	ListJobs(params *ListJobsParams, opts ...ClientOption) (*ListJobsOK, error)

	ListLogsInPod(params *ListLogsInPodParams, opts ...ClientOption) (*ListLogsInPodOK, error)

	ListPodsInTest(params *ListPodsInTestParams, opts ...ClientOption) (*ListPodsInTestOK, error)

	ListTasks(params *ListTasksParams, opts ...ClientOption) (*ListTasksOK, error)

	ListTestFlowsInGroup(params *ListTestFlowsInGroupParams, opts ...ClientOption) (*ListTestFlowsInGroupOK, error)

	RunJobImmediately(params *RunJobImmediatelyParams, opts ...ClientOption) (*RunJobImmediatelyOK, error)

	SaveCases(params *SaveCasesParams, opts ...ClientOption) (*SaveCasesOK, error)

	SaveJob(params *SaveJobParams, opts ...ClientOption) (*SaveJobOK, error)

	SaveTestFlow(params *SaveTestFlowParams, opts ...ClientOption) (*SaveTestFlowOK, error)

	StopTask(params *StopTaskParams, opts ...ClientOption) (*StopTaskOK, error)

	UpdateGroup(params *UpdateGroupParams, opts ...ClientOption) (*UpdateGroupOK, error)

	UpdateJob(params *UpdateJobParams, opts ...ClientOption) (*UpdateJobOK, error)

	UploadPlugin(params *UploadPluginParams, opts ...ClientOption) (*UploadPluginOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Changetestflow change testflow group id
*/
func (a *Client) Changetestflow(params *ChangetestflowParams, opts ...ClientOption) (*ChangetestflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangetestflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "changetestflow",
		Method:             "POST",
		PathPattern:        "/changegroup",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangetestflowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangetestflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changetestflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CountTestFlowsInGroup Count testflow numbers in group
*/
func (a *Client) CountTestFlowsInGroup(params *CountTestFlowsInGroupParams, opts ...ClientOption) (*CountTestFlowsInGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCountTestFlowsInGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "countTestFlowsInGroup",
		Method:             "GET",
		PathPattern:        "/testflow/count/",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CountTestFlowsInGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CountTestFlowsInGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for countTestFlowsInGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteGroup Delete group by id
*/
func (a *Client) DeleteGroup(params *DeleteGroupParams, opts ...ClientOption) (*DeleteGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteGroup",
		Method:             "DELETE",
		PathPattern:        "/group/{id}",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteJob Delete job by id
*/
func (a *Client) DeleteJob(params *DeleteJobParams, opts ...ClientOption) (*DeleteJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteJob",
		Method:             "DELETE",
		PathPattern:        "/job/{id}",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTask Delete task by id
*/
func (a *Client) DeleteTask(params *DeleteTaskParams, opts ...ClientOption) (*DeleteTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTask",
		Method:             "DELETE",
		PathPattern:        "/task/{id}",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTestFlow Delete test flow by id
*/
func (a *Client) DeleteTestFlow(params *DeleteTestFlowParams, opts ...ClientOption) (*DeleteTestFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTestFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTestFlow",
		Method:             "DELETE",
		PathPattern:        "/testflow/{id}",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTestFlowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTestFlowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTestFlow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGroupByID gets specific group by id
*/
func (a *Client) GetGroupByID(params *GetGroupByIDParams, opts ...ClientOption) (*GetGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGroupById",
		Method:             "GET",
		PathPattern:        "/group/{id}",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGroupByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetJob Get job detail by id
*/
func (a *Client) GetJob(params *GetJobParams, opts ...ClientOption) (*GetJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getJob",
		Method:             "GET",
		PathPattern:        "/job/detail/{id}",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPlugin gets plugin by name and version
*/
func (a *Client) GetPlugin(params *GetPluginParams, opts ...ClientOption) (*GetPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPlugin",
		Method:             "GET",
		PathPattern:        "/plugin/get",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTask Get task by id
*/
func (a *Client) GetTask(params *GetTaskParams, opts ...ClientOption) (*GetTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTask",
		Method:             "GET",
		PathPattern:        "/task/{id}",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTestFlow gets specific test case by condition
*/
func (a *Client) GetTestFlow(params *GetTestFlowParams, opts ...ClientOption) (*GetTestFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTestFlow",
		Method:             "GET",
		PathPattern:        "/testflow",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTestFlowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestFlowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTestFlow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVersion get backend version
*/
func (a *Client) GetVersion(params *GetVersionParams, opts ...ClientOption) (*GetVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVersion",
		Method:             "GET",
		PathPattern:        "/version",
		ProducesMediaTypes: []string{"application/text"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ImportPlugin imports plugin mainfest
*/
func (a *Client) ImportPlugin(params *ImportPluginParams, opts ...ClientOption) (*ImportPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportPluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importPlugin",
		Method:             "POST",
		PathPattern:        "/plugin/import",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportPluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportPluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListDeployPlugins lists all deploy plugin
*/
func (a *Client) ListDeployPlugins(params *ListDeployPluginsParams, opts ...ClientOption) (*ListDeployPluginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDeployPluginsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listDeployPlugins",
		Method:             "GET",
		PathPattern:        "/plugin/deploy",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListDeployPluginsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDeployPluginsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listDeployPlugins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListExecPlugin lists all deploy plugin
*/
func (a *Client) ListExecPlugin(params *ListExecPluginParams, opts ...ClientOption) (*ListExecPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListExecPluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listExecPlugin",
		Method:             "GET",
		PathPattern:        "/plugin/exec",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListExecPluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListExecPluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listExecPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListGroup lists all group
*/
func (a *Client) ListGroup(params *ListGroupParams, opts ...ClientOption) (*ListGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGroup",
		Method:             "GET",
		PathPattern:        "/group",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListJobs lists all jobs
*/
func (a *Client) ListJobs(params *ListJobsParams, opts ...ClientOption) (*ListJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listJobs",
		Method:             "GET",
		PathPattern:        "/job",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListLogsInPod gets all logs in pod
*/
func (a *Client) ListLogsInPod(params *ListLogsInPodParams, opts ...ClientOption) (*ListLogsInPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLogsInPodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listLogsInPod",
		Method:             "GET",
		PathPattern:        "/logs/{podName}",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListLogsInPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLogsInPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listLogsInPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPodsInTest lists all pod names in test
*/
func (a *Client) ListPodsInTest(params *ListPodsInTestParams, opts ...ClientOption) (*ListPodsInTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPodsInTestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPodsInTest",
		Method:             "GET",
		PathPattern:        "/logs/pods/{testid}",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListPodsInTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPodsInTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPodsInTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTasks lists all tasks
*/
func (a *Client) ListTasks(params *ListTasksParams, opts ...ClientOption) (*ListTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTasks",
		Method:             "GET",
		PathPattern:        "/task",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTestFlowsInGroup lists exec test flows in specific group
*/
func (a *Client) ListTestFlowsInGroup(params *ListTestFlowsInGroupParams, opts ...ClientOption) (*ListTestFlowsInGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTestFlowsInGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTestFlowsInGroup",
		Method:             "GET",
		PathPattern:        "/testflow/list/",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTestFlowsInGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTestFlowsInGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTestFlowsInGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunJobImmediately run job immediately
*/
func (a *Client) RunJobImmediately(params *RunJobImmediatelyParams, opts ...ClientOption) (*RunJobImmediatelyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunJobImmediatelyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "runJobImmediately",
		Method:             "POST",
		PathPattern:        "/run/{jobid}",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunJobImmediatelyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunJobImmediatelyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for runJobImmediately: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveCases Save group
*/
func (a *Client) SaveCases(params *SaveCasesParams, opts ...ClientOption) (*SaveCasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveCasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveCases",
		Method:             "POST",
		PathPattern:        "/group",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SaveCasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveCasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveCases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveJob save job entity, create if not exist
*/
func (a *Client) SaveJob(params *SaveJobParams, opts ...ClientOption) (*SaveJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveJob",
		Method:             "POST",
		PathPattern:        "/job",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SaveJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveTestFlow save test case, create if not exist
*/
func (a *Client) SaveTestFlow(params *SaveTestFlowParams, opts ...ClientOption) (*SaveTestFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveTestFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveTestFlow",
		Method:             "POST",
		PathPattern:        "/testflow",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SaveTestFlowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveTestFlowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveTestFlow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopTask stop task
*/
func (a *Client) StopTask(params *StopTaskParams, opts ...ClientOption) (*StopTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopTask",
		Method:             "DELETE",
		PathPattern:        "/task/stop/{id}",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGroup Update group name/show/description
*/
func (a *Client) UpdateGroup(params *UpdateGroupParams, opts ...ClientOption) (*UpdateGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGroup",
		Method:             "POST",
		PathPattern:        "/group/{id}",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateJob Update job
*/
func (a *Client) UpdateJob(params *UpdateJobParams, opts ...ClientOption) (*UpdateJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateJob",
		Method:             "GET",
		PathPattern:        "/job/{id}",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadPlugin lists all deploy plugin
*/
func (a *Client) UploadPlugin(params *UploadPluginParams, opts ...ClientOption) (*UploadPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadPluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadPlugin",
		Method:             "GET",
		PathPattern:        "/plugin/upload",
		ProducesMediaTypes: []string{"application/json", "application/text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadPluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadPluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
